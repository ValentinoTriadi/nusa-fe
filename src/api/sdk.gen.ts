// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import {
  healthResponseTransformer,
  protectedhealthResponseTransformer,
} from './transformers.gen';
import type {
  CreateCartData,
  CreateCartErrors,
  CreateCartResponses,
  CreateFavoriteData,
  CreateFavoriteErrors,
  CreateFavoriteResponses,
  CreateProductData,
  CreateProductErrors,
  CreateProductResponses,
  CreateStoreData,
  CreateStoreErrors,
  CreateStoreResponses,
  CreateTransactionData,
  CreateTransactionErrors,
  CreateTransactionResponses,
  CreateWholesalePriceData,
  CreateWholesalePriceErrors,
  CreateWholesalePriceResponses,
  DeleteCartData,
  DeleteCartErrors,
  DeleteCartResponses,
  DeleteFavoriteData,
  DeleteFavoriteErrors,
  DeleteFavoriteResponses,
  DeleteProductData,
  DeleteProductErrors,
  DeleteProductResponses,
  DeleteStoreData,
  DeleteStoreErrors,
  DeleteStoreResponses,
  DeleteTransactionData,
  DeleteTransactionErrors,
  DeleteTransactionResponses,
  DeleteWholesalePriceData,
  DeleteWholesalePriceErrors,
  DeleteWholesalePriceResponses,
  GetCartData,
  GetCartErrors,
  GetCartResponses,
  GetFavoriteData,
  GetFavoriteErrors,
  GetFavoriteResponses,
  GetProductData,
  GetProductErrors,
  GetProductResponses,
  GetStoreData,
  GetStoreErrors,
  GetStoreOwnedData,
  GetStoreOwnedErrors,
  GetStoreOwnedResponses,
  GetStoreResponses,
  GetTransactionData,
  GetTransactionErrors,
  GetTransactionResponses,
  GetWholesalePriceData,
  GetWholesalePriceErrors,
  GetWholesalePriceResponses,
  HealthData,
  HealthResponses,
  ListCartItemsData,
  ListCartItemsErrors,
  ListCartItemsResponses,
  ListFavoritesData,
  ListFavoritesErrors,
  ListFavoritesResponses,
  ListProductsData,
  ListProductsErrors,
  ListProductsResponses,
  ListStoresData,
  ListStoresErrors,
  ListStoresResponses,
  ListTransactionsData,
  ListTransactionsErrors,
  ListTransactionsResponses,
  ListWholesalePricesData,
  ListWholesalePricesErrors,
  ListWholesalePricesResponses,
  ProtectedhealthData,
  ProtectedhealthResponses,
  UpdateCartData,
  UpdateCartErrors,
  UpdateCartResponses,
  UpdateFavoriteData,
  UpdateFavoriteErrors,
  UpdateFavoriteResponses,
  UpdateProductData,
  UpdateProductErrors,
  UpdateProductResponses,
  UpdateStoreData,
  UpdateStoreErrors,
  UpdateStoreResponses,
  UpdateTransactionData,
  UpdateTransactionErrors,
  UpdateTransactionResponses,
  UpdateWholesalePriceData,
  UpdateWholesalePriceErrors,
  UpdateWholesalePriceResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const health = <ThrowOnError extends boolean = false>(
  options?: Options<HealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: healthResponseTransformer,
    responseType: 'json',
    url: '/api/health',
    ...options,
  });
};

export const protectedhealth = <ThrowOnError extends boolean = false>(
  options?: Options<ProtectedhealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ProtectedhealthResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: protectedhealthResponseTransformer,
    responseType: 'json',
    url: '/api/health/protected',
    ...options,
  });
};

export const listStores = <ThrowOnError extends boolean = false>(
  options?: Options<ListStoresData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListStoresResponses,
    ListStoresErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/store',
    ...options,
  });
};

export const createStore = <ThrowOnError extends boolean = false>(
  options?: Options<CreateStoreData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateStoreResponses,
    CreateStoreErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/store',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getStoreOwned = <ThrowOnError extends boolean = false>(
  options?: Options<GetStoreOwnedData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStoreOwnedResponses,
    GetStoreOwnedErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/store/me',
    ...options,
  });
};

export const deleteStore = <ThrowOnError extends boolean = false>(
  options: Options<DeleteStoreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteStoreResponses,
    DeleteStoreErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/store/:id',
    ...options,
  });
};

export const getStore = <ThrowOnError extends boolean = false>(
  options: Options<GetStoreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetStoreResponses,
    GetStoreErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/store/:id',
    ...options,
  });
};

export const updateStore = <ThrowOnError extends boolean = false>(
  options: Options<UpdateStoreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateStoreResponses,
    UpdateStoreErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/store/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const listProducts = <ThrowOnError extends boolean = false>(
  options?: Options<ListProductsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProductsResponses,
    ListProductsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/product',
    ...options,
  });
};

export const createProduct = <ThrowOnError extends boolean = false>(
  options?: Options<CreateProductData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateProductResponses,
    CreateProductErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/product',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteProduct = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProductData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProductResponses,
    DeleteProductErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/product/:id',
    ...options,
  });
};

export const getProduct = <ThrowOnError extends boolean = false>(
  options: Options<GetProductData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProductResponses,
    GetProductErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/product/:id',
    ...options,
  });
};

export const updateProduct = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProductData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProductResponses,
    UpdateProductErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/product/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const listWholesalePrices = <ThrowOnError extends boolean = false>(
  options?: Options<ListWholesalePricesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListWholesalePricesResponses,
    ListWholesalePricesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/wholesale-price',
    ...options,
  });
};

export const createWholesalePrice = <ThrowOnError extends boolean = false>(
  options?: Options<CreateWholesalePriceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateWholesalePriceResponses,
    CreateWholesalePriceErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/wholesale-price',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteWholesalePrice = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWholesalePriceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteWholesalePriceResponses,
    DeleteWholesalePriceErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/wholesale-price/:id',
    ...options,
  });
};

export const getWholesalePrice = <ThrowOnError extends boolean = false>(
  options: Options<GetWholesalePriceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetWholesalePriceResponses,
    GetWholesalePriceErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/wholesale-price/:id',
    ...options,
  });
};

export const updateWholesalePrice = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWholesalePriceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateWholesalePriceResponses,
    UpdateWholesalePriceErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/wholesale-price/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const listCartItems = <ThrowOnError extends boolean = false>(
  options?: Options<ListCartItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCartItemsResponses,
    ListCartItemsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/cart',
    ...options,
  });
};

export const createCart = <ThrowOnError extends boolean = false>(
  options?: Options<CreateCartData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateCartResponses,
    CreateCartErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/cart',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteCart = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCartData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCartResponses,
    DeleteCartErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/cart/:id',
    ...options,
  });
};

export const getCart = <ThrowOnError extends boolean = false>(
  options: Options<GetCartData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCartResponses,
    GetCartErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/cart/:id',
    ...options,
  });
};

export const updateCart = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCartData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCartResponses,
    UpdateCartErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/cart/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const listFavorites = <ThrowOnError extends boolean = false>(
  options?: Options<ListFavoritesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFavoritesResponses,
    ListFavoritesErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/favorite',
    ...options,
  });
};

export const createFavorite = <ThrowOnError extends boolean = false>(
  options?: Options<CreateFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateFavoriteResponses,
    CreateFavoriteErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/favorite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteFavorite = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFavoriteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFavoriteResponses,
    DeleteFavoriteErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/favorite/:id',
    ...options,
  });
};

export const getFavorite = <ThrowOnError extends boolean = false>(
  options: Options<GetFavoriteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFavoriteResponses,
    GetFavoriteErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/favorite/:id',
    ...options,
  });
};

export const updateFavorite = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFavoriteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFavoriteResponses,
    UpdateFavoriteErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/favorite/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const listTransactions = <ThrowOnError extends boolean = false>(
  options?: Options<ListTransactionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTransactionsResponses,
    ListTransactionsErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/transaction',
    ...options,
  });
};

export const createTransaction = <ThrowOnError extends boolean = false>(
  options?: Options<CreateTransactionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateTransactionResponses,
    CreateTransactionErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/transaction',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteTransaction = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTransactionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTransactionResponses,
    DeleteTransactionErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/transaction/:id',
    ...options,
  });
};

export const getTransaction = <ThrowOnError extends boolean = false>(
  options: Options<GetTransactionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTransactionResponses,
    GetTransactionErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/transaction/:id',
    ...options,
  });
};

export const updateTransaction = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTransactionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateTransactionResponses,
    UpdateTransactionErrors,
    ThrowOnError
  >({
    responseType: 'json',
    url: '/api/transaction/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
