// This file is auto-generated by @hey-api/openapi-ts

export type Product = {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrls: Array<string>;
  unit: string;
  stock: number;
  tags: Array<string>;
  storeId: string;
  createdAt: string;
};

export type ProductWithStore = Product & {
  store?: {
    id: string;
    userId: string;
    storeName: string;
    businessId: string;
    businessType: string;
    businessDescription: string;
    tags: Array<string>;
    description: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    postalCode: string;
    createdAt: string;
    updatedAt: string;
  };
  wholesalePrices?: Array<{
    id: string;
    productId: string;
    minQuantity: number;
    maxQuantity: number;
    price: number;
  }>;
};

export type HealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/health';
};

export type HealthResponses = {
  /**
   * Health check successful
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      status?: string;
      timestamp: Date;
    };
  };
};

export type HealthResponse = HealthResponses[keyof HealthResponses];

export type ProtectedhealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/health/protected';
};

export type ProtectedhealthResponses = {
  /**
   * Protected Health check successful
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      status?: string;
      user?: {
        id: string;
        email: string;
        emailVerified: boolean;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        image?: string;
      };
      session?: {
        id: string;
        userId: string;
        expiresAt: Date;
        createdAt: Date;
        updatedAt: Date;
        token: string;
        ipAddress?: string;
        userAgent?: string;
      };
      timestamp: Date;
    };
  };
};

export type ProtectedhealthResponse =
  ProtectedhealthResponses[keyof ProtectedhealthResponses];

export type ListStoresData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/store';
};

export type ListStoresErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type ListStoresError = ListStoresErrors[keyof ListStoresErrors];

export type ListStoresResponses = {
  /**
   * Stores retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Array<{
      id: string;
      userId: string;
      storeName: string;
      businessId: string;
      businessType: string;
      businessDescription: string;
      tags: Array<string>;
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      postalCode: string;
      createdAt: string;
      updatedAt: string;
    }>;
  };
};

export type ListStoresResponse = ListStoresResponses[keyof ListStoresResponses];

export type CreateStoreData = {
  body?: {
    storeName?: string;
    businessId?: string;
    businessType?: string;
    businessDescription?: string;
    tags?: Array<string>;
    description?: string;
    phoneNumber?: string;
    address?: string;
    city?: string;
    province?: string;
    postalCode?: string;
  };
  path?: never;
  query?: never;
  url: '/api/store';
};

export type CreateStoreErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type CreateStoreError = CreateStoreErrors[keyof CreateStoreErrors];

export type CreateStoreResponses = {
  /**
   * Store created successfully
   */
  201: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      storeName: string;
      businessId: string;
      businessType: string;
      businessDescription: string;
      tags: Array<string>;
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      postalCode: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type CreateStoreResponse =
  CreateStoreResponses[keyof CreateStoreResponses];

export type GetStoreOwnedData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/store/me';
};

export type GetStoreOwnedErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetStoreOwnedError = GetStoreOwnedErrors[keyof GetStoreOwnedErrors];

export type GetStoreOwnedResponses = {
  /**
   * Store retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      storeName: string;
      businessId: string;
      businessType: string;
      businessDescription: string;
      tags: Array<string>;
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      postalCode: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type GetStoreOwnedResponse =
  GetStoreOwnedResponses[keyof GetStoreOwnedResponses];

export type DeleteStoreData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/store/:id';
};

export type DeleteStoreErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type DeleteStoreError = DeleteStoreErrors[keyof DeleteStoreErrors];

export type DeleteStoreResponses = {
  /**
   * Store deleted successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      storeName: string;
      businessId: string;
      businessType: string;
      businessDescription: string;
      tags: Array<string>;
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      postalCode: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type DeleteStoreResponse =
  DeleteStoreResponses[keyof DeleteStoreResponses];

export type GetStoreData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/store/:id';
};

export type GetStoreErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetStoreError = GetStoreErrors[keyof GetStoreErrors];

export type GetStoreResponses = {
  /**
   * Store retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      storeName: string;
      businessId: string;
      businessType: string;
      businessDescription: string;
      tags: Array<string>;
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      postalCode: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type GetStoreResponse = GetStoreResponses[keyof GetStoreResponses];

export type UpdateStoreData = {
  body?: {
    storeName?: string;
    businessId?: string;
    businessType?: string;
    businessDescription?: string;
    tags?: Array<string>;
    description?: string;
    phoneNumber?: string;
    address?: string;
    city?: string;
    province?: string;
    postalCode?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/store/:id';
};

export type UpdateStoreErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type UpdateStoreError = UpdateStoreErrors[keyof UpdateStoreErrors];

export type UpdateStoreResponses = {
  /**
   * Store updated successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      storeName: string;
      businessId: string;
      businessType: string;
      businessDescription: string;
      tags: Array<string>;
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      postalCode: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type UpdateStoreResponse =
  UpdateStoreResponses[keyof UpdateStoreResponses];

export type ListProductsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/product';
};

export type ListProductsErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type ListProductsError = ListProductsErrors[keyof ListProductsErrors];

export type ListProductsResponses = {
  /**
   * Products retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Array<ProductWithStore>;
  };
};

export type ListProductsResponse =
  ListProductsResponses[keyof ListProductsResponses];

export type CreateProductData = {
  body?: {
    name?: string;
    description?: string;
    price?: number;
    imageUrls?: Array<string>;
    unit?: string;
    stock?: number;
    tags?: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/api/product';
};

export type CreateProductErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type CreateProductError = CreateProductErrors[keyof CreateProductErrors];

export type CreateProductResponses = {
  /**
   * Product created successfully
   */
  201: {
    success: boolean;
    message: string;
    code?: number;
    data?: Product;
  };
};

export type CreateProductResponse =
  CreateProductResponses[keyof CreateProductResponses];

export type DeleteProductData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/product/:id';
};

export type DeleteProductErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type DeleteProductError = DeleteProductErrors[keyof DeleteProductErrors];

export type DeleteProductResponses = {
  /**
   * Product deleted successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Product;
  };
};

export type DeleteProductResponse =
  DeleteProductResponses[keyof DeleteProductResponses];

export type GetProductData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/product/:id';
};

export type GetProductErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetProductError = GetProductErrors[keyof GetProductErrors];

export type GetProductResponses = {
  /**
   * Product retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Product;
  };
};

export type GetProductResponse = GetProductResponses[keyof GetProductResponses];

export type UpdateProductData = {
  body?: {
    name?: string;
    description?: string;
    price?: number;
    imageUrls?: Array<string>;
    unit?: string;
    stock?: number;
    tags?: Array<string>;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/product/:id';
};

export type UpdateProductErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type UpdateProductError = UpdateProductErrors[keyof UpdateProductErrors];

export type UpdateProductResponses = {
  /**
   * Product updated successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Product;
  };
};

export type UpdateProductResponse =
  UpdateProductResponses[keyof UpdateProductResponses];

export type ListWholesalePricesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/wholesale-price';
};

export type ListWholesalePricesErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type ListWholesalePricesError =
  ListWholesalePricesErrors[keyof ListWholesalePricesErrors];

export type ListWholesalePricesResponses = {
  /**
   * Wholesale prices retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Array<{
      id: string;
      productId: string;
      minQuantity: number;
      maxQuantity: number;
      price: number;
    }>;
  };
};

export type ListWholesalePricesResponse =
  ListWholesalePricesResponses[keyof ListWholesalePricesResponses];

export type CreateWholesalePriceData = {
  body?: {
    productId: string;
    minQuantity?: number;
    maxQuantity?: number;
    price?: number;
  };
  path?: never;
  query?: never;
  url: '/api/wholesale-price';
};

export type CreateWholesalePriceErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type CreateWholesalePriceError =
  CreateWholesalePriceErrors[keyof CreateWholesalePriceErrors];

export type CreateWholesalePriceResponses = {
  /**
   * Wholesale price created successfully
   */
  201: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      productId: string;
      minQuantity: number;
      maxQuantity: number;
      price: number;
    };
  };
};

export type CreateWholesalePriceResponse =
  CreateWholesalePriceResponses[keyof CreateWholesalePriceResponses];

export type DeleteWholesalePriceData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/wholesale-price/:id';
};

export type DeleteWholesalePriceErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type DeleteWholesalePriceError =
  DeleteWholesalePriceErrors[keyof DeleteWholesalePriceErrors];

export type DeleteWholesalePriceResponses = {
  /**
   * Wholesale price deleted successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      productId: string;
      minQuantity: number;
      maxQuantity: number;
      price: number;
    };
  };
};

export type DeleteWholesalePriceResponse =
  DeleteWholesalePriceResponses[keyof DeleteWholesalePriceResponses];

export type GetWholesalePriceData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/wholesale-price/:id';
};

export type GetWholesalePriceErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetWholesalePriceError =
  GetWholesalePriceErrors[keyof GetWholesalePriceErrors];

export type GetWholesalePriceResponses = {
  /**
   * Wholesale price retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      productId: string;
      minQuantity: number;
      maxQuantity: number;
      price: number;
    };
  };
};

export type GetWholesalePriceResponse =
  GetWholesalePriceResponses[keyof GetWholesalePriceResponses];

export type UpdateWholesalePriceData = {
  body?: {
    productId?: string;
    minQuantity?: number;
    maxQuantity?: number;
    price?: number;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/wholesale-price/:id';
};

export type UpdateWholesalePriceErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type UpdateWholesalePriceError =
  UpdateWholesalePriceErrors[keyof UpdateWholesalePriceErrors];

export type UpdateWholesalePriceResponses = {
  /**
   * Wholesale price updated successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      productId: string;
      minQuantity: number;
      maxQuantity: number;
      price: number;
    };
  };
};

export type UpdateWholesalePriceResponse =
  UpdateWholesalePriceResponses[keyof UpdateWholesalePriceResponses];

export type ListCartItemsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/cart';
};

export type ListCartItemsErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type ListCartItemsError = ListCartItemsErrors[keyof ListCartItemsErrors];

export type ListCartItemsResponses = {
  /**
   * Cart items retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Array<{
      id: string;
      userId: string;
      productId: string;
      quantity: number;
      createdAt: string;
      updatedAt: string;
    }>;
  };
};

export type ListCartItemsResponse =
  ListCartItemsResponses[keyof ListCartItemsResponses];

export type CreateCartData = {
  body?: {
    productId: string;
    quantity: number;
  };
  path?: never;
  query?: never;
  url: '/api/cart';
};

export type CreateCartErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type CreateCartError = CreateCartErrors[keyof CreateCartErrors];

export type CreateCartResponses = {
  /**
   * Cart item created successfully
   */
  201: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      quantity: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type CreateCartResponse = CreateCartResponses[keyof CreateCartResponses];

export type DeleteCartData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/cart/:id';
};

export type DeleteCartErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type DeleteCartError = DeleteCartErrors[keyof DeleteCartErrors];

export type DeleteCartResponses = {
  /**
   * Cart item deleted successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      quantity: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type DeleteCartResponse = DeleteCartResponses[keyof DeleteCartResponses];

export type GetCartData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/cart/:id';
};

export type GetCartErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetCartError = GetCartErrors[keyof GetCartErrors];

export type GetCartResponses = {
  /**
   * Cart item retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      quantity: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type GetCartResponse = GetCartResponses[keyof GetCartResponses];

export type UpdateCartData = {
  body?: {
    productId?: string;
    quantity?: number;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/cart/:id';
};

export type UpdateCartErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type UpdateCartError = UpdateCartErrors[keyof UpdateCartErrors];

export type UpdateCartResponses = {
  /**
   * Cart item updated successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      quantity: number;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type UpdateCartResponse = UpdateCartResponses[keyof UpdateCartResponses];

export type ListFavoritesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/favorite';
};

export type ListFavoritesErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type ListFavoritesError = ListFavoritesErrors[keyof ListFavoritesErrors];

export type ListFavoritesResponses = {
  /**
   * Favorites retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Array<{
      id: string;
      userId: string;
      productId: string;
      createdAt: string;
    }>;
  };
};

export type ListFavoritesResponse =
  ListFavoritesResponses[keyof ListFavoritesResponses];

export type CreateFavoriteData = {
  body?: {
    productId: string;
  };
  path?: never;
  query?: never;
  url: '/api/favorite';
};

export type CreateFavoriteErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type CreateFavoriteError =
  CreateFavoriteErrors[keyof CreateFavoriteErrors];

export type CreateFavoriteResponses = {
  /**
   * Favorite created successfully
   */
  201: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      createdAt: string;
    };
  };
};

export type CreateFavoriteResponse =
  CreateFavoriteResponses[keyof CreateFavoriteResponses];

export type DeleteFavoriteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/favorite/:id';
};

export type DeleteFavoriteErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type DeleteFavoriteError =
  DeleteFavoriteErrors[keyof DeleteFavoriteErrors];

export type DeleteFavoriteResponses = {
  /**
   * Favorite deleted successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      createdAt: string;
    };
  };
};

export type DeleteFavoriteResponse =
  DeleteFavoriteResponses[keyof DeleteFavoriteResponses];

export type GetFavoriteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/favorite/:id';
};

export type GetFavoriteErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetFavoriteError = GetFavoriteErrors[keyof GetFavoriteErrors];

export type GetFavoriteResponses = {
  /**
   * Favorite retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      createdAt: string;
    };
  };
};

export type GetFavoriteResponse =
  GetFavoriteResponses[keyof GetFavoriteResponses];

export type UpdateFavoriteData = {
  body?: {
    productId?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/favorite/:id';
};

export type UpdateFavoriteErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type UpdateFavoriteError =
  UpdateFavoriteErrors[keyof UpdateFavoriteErrors];

export type UpdateFavoriteResponses = {
  /**
   * Favorite updated successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      userId: string;
      productId: string;
      createdAt: string;
    };
  };
};

export type UpdateFavoriteResponse =
  UpdateFavoriteResponses[keyof UpdateFavoriteResponses];

export type ListTransactionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/transaction';
};

export type ListTransactionsErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type ListTransactionsError =
  ListTransactionsErrors[keyof ListTransactionsErrors];

export type ListTransactionsResponses = {
  /**
   * Transactions retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: Array<{
      id: string;
      buyerId: string;
      sellerId: string;
      totalAmount: number;
      shippingMethod: string;
      shippingCost: number;
      paymentMethod: string;
      status: string;
      address: string;
      createdAt: string;
    }>;
  };
};

export type ListTransactionsResponse =
  ListTransactionsResponses[keyof ListTransactionsResponses];

export type CreateTransactionData = {
  body?: {
    sellerId: string;
    totalAmount?: number;
    shippingMethod?: string;
    shippingCost?: number;
    paymentMethod?: string;
    status?: string;
    address?: string;
  };
  path?: never;
  query?: never;
  url: '/api/transaction';
};

export type CreateTransactionErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type CreateTransactionError =
  CreateTransactionErrors[keyof CreateTransactionErrors];

export type CreateTransactionResponses = {
  /**
   * Transaction created successfully
   */
  201: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      buyerId: string;
      sellerId: string;
      totalAmount: number;
      shippingMethod: string;
      shippingCost: number;
      paymentMethod: string;
      status: string;
      address: string;
      createdAt: string;
    };
  };
};

export type CreateTransactionResponse =
  CreateTransactionResponses[keyof CreateTransactionResponses];

export type DeleteTransactionData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/transaction/:id';
};

export type DeleteTransactionErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type DeleteTransactionError =
  DeleteTransactionErrors[keyof DeleteTransactionErrors];

export type DeleteTransactionResponses = {
  /**
   * Transaction deleted successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      buyerId: string;
      sellerId: string;
      totalAmount: number;
      shippingMethod: string;
      shippingCost: number;
      paymentMethod: string;
      status: string;
      address: string;
      createdAt: string;
    };
  };
};

export type DeleteTransactionResponse =
  DeleteTransactionResponses[keyof DeleteTransactionResponses];

export type GetTransactionData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/transaction/:id';
};

export type GetTransactionErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type GetTransactionError =
  GetTransactionErrors[keyof GetTransactionErrors];

export type GetTransactionResponses = {
  /**
   * Transaction retrieved successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      buyerId: string;
      sellerId: string;
      totalAmount: number;
      shippingMethod: string;
      shippingCost: number;
      paymentMethod: string;
      status: string;
      address: string;
      createdAt: string;
    };
  };
};

export type GetTransactionResponse =
  GetTransactionResponses[keyof GetTransactionResponses];

export type UpdateTransactionData = {
  body?: {
    sellerId?: string;
    totalAmount?: number;
    shippingMethod?: string;
    shippingCost?: number;
    paymentMethod?: string;
    status?: string;
    address?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/transaction/:id';
};

export type UpdateTransactionErrors = {
  /**
   * Bad Request
   */
  400: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Forbidden
   */
  403: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Not Found
   */
  404: {
    success: boolean;
    message: string;
    code?: number;
  };
  /**
   * Internal Server Error
   */
  500: {
    success: boolean;
    message: string;
    code?: number;
  };
};

export type UpdateTransactionError =
  UpdateTransactionErrors[keyof UpdateTransactionErrors];

export type UpdateTransactionResponses = {
  /**
   * Transaction updated successfully
   */
  200: {
    success: boolean;
    message: string;
    code?: number;
    data?: {
      id: string;
      buyerId: string;
      sellerId: string;
      totalAmount: number;
      shippingMethod: string;
      shippingCost: number;
      paymentMethod: string;
      status: string;
      address: string;
      createdAt: string;
    };
  };
};

export type UpdateTransactionResponse =
  UpdateTransactionResponses[keyof UpdateTransactionResponses];

export type ClientOptions = {
  baseURL: 'https://api.nusa.vtriadi.site' | (string & {});
};
